commit 5eef224c8fdbb76d727b018ff068227aac5ebc81
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Dec 28 17:26:02 2014 -0500

    don't stack check recursive pagemapping functions

commit dd59f7588b5a182ee84a9e73d6ba6890129abe32
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Dec 28 17:26:52 2014 -0500

    disable profiling
    
    it uses callers() which is broken for some reason (may be because go assumes
    stack size of 3 pages on linux?). track this down!

commit b5b01c8fdc556bede462a2f3dbdf285b81252608
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Dec 28 17:28:35 2014 -0500

    lie about number of cores

commit 81c40888fe49d25617643aa9ed0957547b365794
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Dec 28 17:38:32 2014 -0500

    virtual mem, interrupts, multitasking, and runtime initialization

commit 7a444c5579ed8421834a89eabef6e7d687d21cc4
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Dec 28 17:40:23 2014 -0500

    print in throw()

commit 9b6d828a03d83528255289abe24e57ad789d76d5
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Dec 28 17:41:49 2014 -0500

    add our entry point

commit 5ac4bac1867c1cf661af4b69fb74235509c930dd
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Dec 28 17:42:06 2014 -0500

    hook syscalls for hackmode
    
    exit, write, usleep, clock_gettime, nanotime, sigprocmask, sigaction, mmap,
    munmap, futex, clone, and sigaltstack

commit 91caf7c93dd63ddc70302d2d28302f364674ac1f
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Dec 28 17:43:10 2014 -0500

    hook general syscall interface provided in "syscall" package
    
    only handles write for now

commit e57736adbfb87735340ba8cf252c3868e15a39a3
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Dec 28 17:25:15 2014 -0500

    lie about version string
    
    the version of dist we use requires that the go code is in a mercurial
    repository in order to choose a version number for the build.
    
    we use git now so lie about the version number

commit 30bce134e9a7fdc79c647cf9e6e701c245196ba3
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Jan 5 15:32:49 2015 -0500

    correctly save 64bit fsbase

commit ce32db57a5b3b4e2818c11f7208bfc8ad8ab5798
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Jan 5 15:33:15 2015 -0500

    hook runtime-usleep, tweak timings
    
    will set timings correctly later

commit 83f0f9ac15495b5f7988a4b56347020669313612
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Jan 5 16:03:00 2015 -0500

    noop madvise

commit 4d531fa41f2d0e26dd4ed9d61df33b4f60953e1e
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Jan 7 11:33:40 2015 -0500

    noop yield

commit 37c11f34743cce6a737ed9500c87984e3cc4df8c
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Jan 7 12:36:58 2015 -0500

    toy ip code

commit ad6d42827ad91457376e211cb4df704b41368f24
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Jan 12 11:05:56 2015 -0500

    print wrapping

commit 899aeccf8e0b31b67b6e3f0fdb7a992eae99ccd3
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Jan 12 11:47:45 2015 -0500

    nits

commit 0ef3145e9227a6e2af9b3384357e920f30ff89b5
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Jan 12 18:11:13 2015 -0500

    e820 map for phys mem allocation
    
    that was not fun

commit 73e1c51794b53774e0455bea0e94c7e546302493
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Jan 13 12:07:24 2015 -0500

    less hacky nanotime

commit 12347a7f175c3bd775a0628d4debf348df95f9d6
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Jan 13 14:19:38 2015 -0500

    x

commit c1ee664573dc563f1c65e92230cfd6205fc42ed8
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Jan 13 21:44:37 2015 -0500

    baby go scheduler
    
    unfortunately, the trap handler itself is probably not that useful to write in
    go since, as go uses cooperative threads, a go trap handler interrupting its
    own go code is likely to cause problems.
    
    export helper functions too

commit e0ddec7ec7b0dfbe52f855f75b7d878d4fa6eb32
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Jan 15 18:11:25 2015 -0500

    futex
    
    go uses futexs to sleep

commit 40dab6659da8f4a78bc994df24ae8446caf3dec5
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Jan 15 18:18:39 2015 -0500

    checkpoint bizarre go traphandler/scheduler
    
    need an idle OS proc if we want to handle faults caused by kernel go code which
    require immediate service. set maxprocs = 2 and do other stuff to make it work.

commit 69fee87513877a754faafd75c810b1a3a09928f9
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Jan 20 11:29:01 2015 -0500

    silly bugfix

commit a9476ab6c941c56ad37dc2c46c9662c320b76767
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Jan 20 11:31:42 2015 -0500

    new trap/scheduling design and syscall stub

commit 418cba6989018144ba0a8f8e4affb65cd41fcad8
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Jan 20 16:31:15 2015 -0500

    checkpoint user programs + syscalls
    
    moving user programs to ring 3 next

commit 373f222385a59c8e30b980c817d63c94712f40a9
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Jan 20 19:20:50 2015 -0500

    put user programs in ring 3
    
    the test user program will crash unless the page tables are marked PTE_U.

commit 50ecbbdbd584d578e325aa6bc8fcbf6ec6ee2cc1
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Jan 21 16:31:09 2015 -0500

    go virtual memory management
    
    this will be useful for user program setup.  cleanup types too.

commit eee205a1aa4dbd4e9080398be06a0384ee10f8f3
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Jan 22 12:50:12 2015 -0500

    finish test user program
    
    uses its own page tables now.

commit 77bb8f3ddd168e95bea2b7951ed97382efb0e799
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Jan 22 13:05:50 2015 -0500

    whoops

commit 64c545e1227a47cd047a5aa41e257f34a8387597
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Jan 22 14:01:34 2015 -0500

    more interesting test program
    
    reschedule after syscall, terminate if page fault

commit 357e037f6e8c9f2487c39fce4d6beb897932284a
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Jan 22 15:26:20 2015 -0500

    always switch page maps during context switch

commit 2857855a2774025a2be6a5236c49ced816c4005f
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Jan 22 15:37:41 2015 -0500

    ucookie -> pid

commit 19ee6ffbb2a0706e341df96bfe64f7cb45c831ce
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Jan 22 15:53:34 2015 -0500

    processes
    
    reclaim memory from killed procs using GC(). cool!

commit 814f7e20607c23ef98b7d5906fbde56db9efc9d5
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Jan 23 19:33:35 2015 -0500

    fix evil non-deterministic bug
    
    because the go kernel runs in ring 0 and grows its own stack, the stack while
    handling a timer interrupt may not be mapped in every process. thus, during a
    context switch, the ret instruction in the lcr3 function faults. because the
    stack is no longer valid, a triple-fault/reboot results.
    
    one fix is to inline lcr3. that way the stack of the interrupted task is not
    used after the new page map is loaded.

commit 8f6094387dede531b61a46fbf344bb03da756e97
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Jan 23 19:39:52 2015 -0500

    use the IST for double-faults
    
    the IST is an awesome feature only available in long-mode. it makes the
    processor switch stacks unconditionally, regardless of new/old privilege level.
    
    thanks to the IST, buggy kernel code or odd kernels that grow their own stacks
    don't triple-fault, but helpfully double-fault.

commit 311b76b148c5828841f322a8780f849fef719bf1
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Jan 23 19:44:31 2015 -0500

    small bugs, debug code

commit 1409579d88b7da6337d98acfb2fd984fc747389c
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Jan 26 19:35:57 2015 -0500

    fix write
    
    panic tracebacks seem to work now

commit a5a9d469f5e63b904b81d81754933b5912fea173
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Jan 23 23:30:39 2015 -0500

    elf user programs
    
    any elf object in user/ will be inserted into the kernel as an exec'able
    binary.
    
    it would be nice to strictly separate address ranges of kernel and user
    programs.

commit 8b3aed756594ec41af10e42c878c05878ef27292
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Jan 28 10:00:39 2015 -0500

    newlines

commit d14a07795fbfeb289f67a0ff02b0eb4eca9c3f40
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Jan 28 11:07:33 2015 -0500

    remove Death()

commit af4dfcf8673af71c3c914043debc982c6a5a0390
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Jan 29 18:15:00 2015 -0500

    SMP
    
    find and initialize cpus. the test boots up all found cpus (controllable with
    CPUS env variable) each of which print a hello message, spin for a moment, and
    then fault to make sure the IDT/GDT are properly setup.
    
    there is no synchronization yet. next step is to make the runtime/kernel
    thread-safe.

commit 0a2a840b325d1a9af400eb66f5d9a1a401a8775f
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Jan 30 11:21:38 2015 -0500

    disable newlines for explicit panic

commit 4fcb3dc4cfefff837f3bd453d988314e104d91f8
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Jan 30 12:36:59 2015 -0500

    setup AP stacks
    
    enter the terrible world of multicore

commit 3af60b7bc16a62b07aaefc4089da7c5d65ef1d30
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Jan 30 15:32:01 2015 -0500

    initialize lapic/TSS on APs
    
    shuffle stuff around so APs can reuse init code

commit ba56baba55a83523ba96b67faa97578208fc3db4
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Feb 1 15:44:08 2015 -0500

    serial console driver
    
    now i can actually debug biscuit over slow connection remotely.

commit cffb62b5e4b509ab76eb134641d137bfd9c18217
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Feb 1 15:45:18 2015 -0500

    don't set G (granularity) in segment descriptors
    
    although segment limits are mostly ignored in long mode, the TSS limit is not
    ignored since it is necessary to determine whether or not there is an IO bitmap
    (bitten by the damn IO bitmap again!)

commit 53896135ff6a10c16c3f68cca952ebf21ed258d0
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Feb 2 19:04:30 2015 -0500

    increase stackguard to 768 bytes
    
    the largest stack size of all trap paths is > 512 bytes

commit 52007cc98cb8963c1f63ef69cd35112d77b9daf3
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Feb 2 19:04:18 2015 -0500

    parallel runtime scheduler
    
    there were many bugs. discovered a bug in the plan9 C compiler and the plan9
    assembler on the way.
    
    now kernel parallelism should be easy. scheduling code desperately needs
    cleanup; will do this soon.
    
    hack_futex has been band-aid fixed -- need to fix it properly later.

commit 33ae3648201e48c0e259fe6dff15b1af6aaca4cf
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Feb 2 20:30:09 2015 -0500

    raise GOMAXPROCS and NTHREADS to 24

commit 39dad4bd6d345346414167243e5e091da239aeb8
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Feb 4 15:43:46 2015 -0500

    evil bugfixes, fix futex
    
    all bugs were races in the scheduler/trap handling. they were hidden by a slow
    implementation of futex. there were 3 races:
    
    1- since go code is in ring 0, timer interrupts during go code are taken on go
    stacks. consider the following events on CPU1:
            - takes a timer interrupt while executing go process alpha
            - acquires the scheduling lock
            - marks alpha as runnable
            - finds and marks a new process as running
            - releases the lock
    then before CPU 1 has time to iret to the new process and stop using alpha's
    stack, CPU 2 starts running alpha and itself takes a timer interrupt
    overwriting CPU 1's stack.
    
    solve this by using the IST to always take timer interrupts on kernel stacks.
    alternatively, we could release the lock in trapret() once the stack will no
    longer be used, but it seems better to always take traps on the interrupt stack
    anyway.
    
    2- user application page faults. trap handler running on CPU 1 posts exception
    to go kernel, which is running on CPU 2, and go kernel immediately responds by
    terminating the application, reclaiming the page tables while CPU 1 is using
    them.
    
    solve this by changing to the kernel's page tables whenever posting a trap that
    may result in application termination.
    
    3- when a process on CPU 1 is trying to go to sleep for a small amount of time
    and marks itself sleeping, another CPU wakes and starts running the process
    before CPU 1 has yielded and stored the process' state.
    
    solve this by marking a process as sleeping in the timer interrupt, not
    futex(). thus a CPU trying to wake processes up will not mark the process as
    runnable yet.
    
    in conclusion, i am desperately trying to simplify the design!

commit 0c537359567f46404c57e008ed45e8d4e6d9b840
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Feb 4 17:07:19 2015 -0500

    actually fix futex. whoops

commit 4f03c124a56f2eef79bac417c21fb7c55d1fd7d5
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Feb 5 15:40:50 2015 -0500

    write syscall

commit b3f3d16dd6868385cff7eebd7bff71591191276d
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Feb 5 17:36:11 2015 -0500

    don't destroy process
    
    needs to be fixed correctly later

commit 517ccb27973338720f056dc0e19ad3b0dcb97dec
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Feb 6 18:47:38 2015 -0500

    use IST for syscall and page faults

commit 27a8fd492d5c8cd9bdd4be2452c37a199f90eccb
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Feb 10 00:32:44 2015 -0500

    fix memprofiling

commit 735431be5d22041d282e226ff9367dfd72142c3e
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Feb 10 20:13:11 2015 -0500

    yield in usleep instead of spinning

commit 0b16699f931fa679ec056e0fdf1b6d2c4a2b61d5
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Feb 10 19:58:15 2015 -0500

    stack check invlpg

commit 982ce795749af1fe1c23f4e6dad5e03e74449a6a
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Feb 10 20:10:26 2015 -0500

    stack dump goroutine too, in case it used onM

commit 4d44bd0305fd4e497963415198ec4bde5a349913
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Feb 10 20:11:32 2015 -0500

    memory checker (disabled)
    
    sanity checks pages allocated before giving them to go. it writes the page with
    a poison value and then verifies that the page retained the poison value.

commit b7d4fd1d30f9ebfd3cec4c5893a0969692a0a204
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Feb 10 20:14:59 2015 -0500

    halt other cores when any goroutine calls exit()

commit f645ae8782478b13033c123fb8524050b54fbd08
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Feb 10 20:18:24 2015 -0500

    make gothrow work again, now that panic works

commit fb559b6811b566960600daa383f55a2c534ed3d6
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Feb 10 19:56:10 2015 -0500

    horrible goddamn bug
    
    go uses SSE non-temporal moves for fast copying and zeroing of newly allocated
    objects. if you are very unlucky, a zero-initializing go routine may be context
    switched after a copying go routine. since my scheduler did not save/restore
    FPU/SSE state, the SSE registers used were not saved/restored on a context
    switch.
    
    the end result was newly allocated maps having segments of 128 non-zero bytes
    and copied objects having 128 byte segments that were zeroed.
    
    save restore SSE state, and fix a few other bugs like serial access to mmaps,
    trap queue, and syscalls with locks (i'll remove these coarse locks next).
    
    also do go routine stack checks manually in C stubs -- the stack check inserted
    by the compiler panicks if any C code runs on a go routine stack. this makes me
    nervous because i'm not exactly sure why...
    
    goodbye four days of my life

commit 22e233447dd3b04efa6598262bd43b5abda6e6d6
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Feb 11 12:52:21 2015 -0500

    remove paranoia code, better fork test

commit b8c90090d3a8ff80e240c92c6b448123083dac8a
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Feb 12 11:40:39 2015 -0500

    zero bss correctly in bootloader

commit 45823c67235655908504cff858bbc1560d1a6d6e
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Feb 12 11:53:47 2015 -0500

    lockfree per-cpu interrupt circular buffers

commit bda6cd8ad16cd0a4bbaf019764fc2744e13b9081
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Feb 12 17:20:06 2015 -0500

    always switch to kernel page map
    
    this is ok because CPUs will always switch pmaps anyway as the interrupting
    process cannot be serviced immediately.

commit 6cdc5a371a01a03ea35586b020388e0d6536f414
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Feb 13 15:03:36 2015 -0500

    irqs
    
    prep for ata pio driver

commit 5c0351af5230d7b8b13635ee0402a5359372ba18
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Feb 15 20:47:30 2015 -0500

    ide disk driver and ide server go-routine daemon
    
    kernel code submits requests for ide reads/writes through a channel. its very
    straight-forward! we get kernel thread sleeping/wakeup and safe queue access
    for free via go channels. see ide_test() for example code demonstrating how to
    use the ide daemon.

commit d88b83568749b086e731f03d965081637808ae64
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Feb 16 07:27:27 2015 -0500

    x

commit 9dad0d2841b557f0192313614a60ce3320d75f8a
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Feb 16 09:41:21 2015 -0500

    simplify trap/yieldy

commit 4ca384e0e327d42a2352585f9dcfe36775e0d55a
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Feb 16 18:28:32 2015 -0500

    don't try to take spinlock in hack_exit()

commit 40a8b6d7fc07abcb952bee2752537f0774952aea
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Feb 17 12:49:04 2015 -0500

    simplify futex shit again
    
    there is less concurrency now as the futexlock is held across the soft
    interrupt to yield, but the code becomes simpler. seems to make little
    difference for performance.

commit b37c4692d42a6e6a9e0ddc36ad951c640f4631fa
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Feb 23 15:47:27 2015 -0500

    make halt work

commit c14beb90191e74163c20c48596a5eed576fbc664
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Feb 23 19:23:22 2015 -0500

    journaling fs
    
    neat! fs syscalls talk to the logging daemon for admission control and
    committing.
    
    haven't written the recovery procedure yet. poorly tested so far too.

commit 686850dcce55b793698c12d756151dceb6de4ae2
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Mar 5 11:21:30 2015 -0500

    reduce syscall latency by over 10x
    
    if there were no kernel threads for a CPU to run, set the timer interval to a
    smaller value so that CPUs with no work quickly find new/available threads.
    
    we can now ls the whole filesystem in < 1 sec. such speed!

commit 8686c9080ffc0f472c9a672b99c6a7c881bc868a
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sat Mar 7 16:58:34 2015 -0500

    use 2MB pages for direct map if CPU doesn't support 1GB pages
    
    my test hardware sadly does not.
    
    biscuit now boots on real hardware!

commit d048b0d057860b97eb416153f2c5b9510e1a52db
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 9 09:11:39 2015 -0400

    send 8259a EOI on disk interrupt
    
    biscuit now seems to be fully working on at least one computer.

commit e6bd0cff43091cc69bf607cd9047d8893b632604
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 9 09:19:00 2015 -0400

    amusing bug in deadcode
    
    thank you plan9 compiler for not generating a warning

commit c501047125c6253efa626190cfad68aff2712ae2
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 9 09:25:02 2015 -0400

    zero mmap'ed memory, like linux
    
    out of paranoia since the runtime expects it

commit 9c88046989403b925f92d658a4ae48bac89d2938
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 9 12:33:07 2015 -0400

    reduce thread timeslice
    
    set arbitrarily earlier, it was way too big. makes it unnecessary to use a
    small timer when halting.

commit d463bedf584f7c4ce7247f0f217afd7f52b0dd4b
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 9 12:34:48 2015 -0400

    yield the specified amount of time instead of yielding once
    
    though it seems to make no difference in execution

commit 534325f98de3974d724b8f0dd6185c5fb0f1c332
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 9 12:56:25 2015 -0400

    reasonable GOMAXPROCS for test hardware

commit 955ff35b30f876da6cf9c07bbe27883ea6b8b85c
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 9 14:57:10 2015 -0400

    prevent kernel threads from polling interrupt queue until timer interrupt
    
    timeslice size was a red-herring -- the syscall latency problem was that once
    all syscall work was completed, all kernel threads just spin in trap() looking
    for interrupts in the queue until the timeslice expires, only then finally
    returning to user-space (only to immediately syscall again).
    
    explicitly yield after Gosched to prevent this. this is not a great solution
    because, if there are many runnable user processes, an unlucky kernel thread
    may yield and start running a user process instead of handling the syscall.
    maybe this doesn't matter much.
    
    it would probably be better to cooperatively switch to trap() -- maybe we can
    do this in the stack growth prologue.

commit 0e2b1a6b672373289771693626b2f5e783dddd32
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 9 16:05:19 2015 -0400

    exclusive access to VGA buffer/serial console IO ports

commit aefcc32c6a904d104169f1c3658032910895c85d
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 9 19:57:26 2015 -0400

    delay before writing block data in ATA PIO driver
    
    test hardware hangs otherwise

commit 52b5355129b49f193a85a3f3adfd0018338b8aa6
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Mar 12 15:53:37 2015 -0400

    get disk working with recent SATA controllers
    
    SATA controllers can be configured to support ATA/IDE, typically in the BIOS.
    There are two IDE modes, however: PCI-native and legacy. In legacy mode, the
    controller (supposedly) exactly emulates legacy IDE disks (IO ports
    0x1f6/0x3f6, IRQ 14). In PCI-native mode, PCI may have chosen different IO
    ports/mem and IRQs -- we should get the command/control block port offsets from
    the BARs and the IRQ from the Interrupt Line Register of the SATA controller's
    PCI registers. We can also put the SATA controller into legacy/PCI-native IDE
    mode directly via PCI register writes.
    
    Hard code the IDE port offset/IRQ as per the PCI registers for now. If we are
    using Qemu, use the legacy IO ports.

commit c8ba60b0a24c01ec0cffa3880fc9006fedcda11e
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Mar 12 17:57:11 2015 -0400

    unused debug code

commit 7d91880932d599e42d358858d176ac90d5a48fe6
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Mar 12 18:03:33 2015 -0400

    use new e820 entries

commit 5fb3de3476ee5bb2fb241970015d0951392d2a07
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Mar 12 18:38:56 2015 -0400

    GOMAXPROCS=8 for new hardware

commit f22a809261947377704a6c49fe9f4cb16b4744a2
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Mar 12 18:40:38 2015 -0400

    silly MP table bug
    
    the MP table on test hardware has 4 CPU entries, but there are 8 logical CPUs.
    thus the kernel would map only 3 AP stacks, broadcast startup IPIs and then 7
    CPUs would join, 4 of which were unexpected and therefore had invalid stacks.
    as usual, invalid stacks result in triple-fault/reboot.
    
    so broadcast startup IPI, wait for CPUs to join, then map a stack for each CPU
    that joined. when i implement ACPI (which probably tells me the exact logical
    CPU count), i will wait for each CPU again.

commit c9ac55d98df5dda3b9d387cede4ba3925ef96201
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Mar 13 17:38:22 2015 -0400

    PCI config space reads
    
    necessary to clear disk interrupts for PCI-native IDE.
    
    fix panic newlines too.

commit 8b53244a81f4200f4a3044b70f0057e00274c63f
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sat Mar 14 01:04:08 2015 -0400

    don't take printing lock while interrupts are enabled
    
    otherwise can't use printing in interrupt handler

commit d423b9dac3d77dc8b4d74276fbf4c6b04b89efea
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sat Mar 14 01:18:06 2015 -0400

    tricky bug!
    
    there is a subtle difference between two LAPIC states: after machine
    power-up/reset and after the LAPIC has been disabled via the spurious interrupt
    vector. after power-up, the mask bits are all set and software can reset them.
    when the LAPIC is disabled via the spurious interrupt vector, the mask bits are
    set but writes to them are ignored!
    
    thus, depending on how the BIOS initializes the APs, you must turn enable the
    LAPIC first, then mask/enable individual vectors.
    
    now the APs don't get trapped in the HLT loop forever.

commit 58ec22d9e0570a20b0ef8e3369fe25f67b9d325b
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sat Mar 14 16:26:08 2015 -0400

    restore short code to reduce timer ints for halting cpus

commit 5b3cdb9e54912084087189fa5fc26ba71d5a026a
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sat Mar 14 16:44:59 2015 -0400

    synchronize user console print too

commit 24e6d973dc265c98e43bc4bd58f80c19fc12b50f
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 16 14:02:28 2015 -0400

    Outw, Rflags

commit cc32fca80b4e18eceb05b2468024428b278e6103
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 16 14:10:57 2015 -0400

    set serial console speed
    
    gee i wish i would have put useful comments in this initialization routine

commit 7e612ff4f61aded306b539a1c42237c99e19a6d0
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 16 18:34:30 2015 -0400

    cycle counting

commit f05e63dbd6110153c57c3b815123f35d4267e7fd
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 16 19:27:29 2015 -0400

    count cycles spent in GC

commit 9ffeb4776bdb74bd0c63dfa4ff5ddfeec38a749e
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Mar 17 13:30:43 2015 -0400

    make vga easier to read

commit c383c58af8e91f68b9f582057db8349da495d762
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Mar 17 20:28:22 2015 -0400

    easy disabled of serial console
    
    serial console driver is slow since it uses polling. it can impact performance
    measurements by as much as 5x.

commit 374e9f19fcc710a919297d075c0318d9035c8502
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Mar 19 12:04:18 2015 -0400

    make number of APs to use configurable

commit 37c843f61acba2ed6670a6546635f896eb408faa
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Mar 19 14:57:50 2015 -0400

    don't start sysmon() goroutine -- biscuit doesn't need it
    
    i noticed that sysmon() gets scheduled very frequently while i was benchmarking
    the cost of channels. sysmon() is called by a background goroutine started by
    the runtime. it does the following:
            - if enabled, dump some scheduling debug info
            - reclaim P's from syscalls entered via cgo or the Syscall package
              (syscalls made by the runtime are not treated specially)
            - reclaim P's from goroutines that have run for more than 10ms
            - poll the network after some timeout
            - forcing a GC after some timeout
            - forcing a "scavenge" (calling madvise(DONT_NEED) on all pages not
              recently used) of the heap after some timeout
    
    we probably don't care about any of this but the GC, which biscuit can do
    better since it knows when to do it. thus, remove sysmon from biscuit.
    
    alternatively, i could fix biscuit's concept of time so that sysmon() sleeps
    for the correct amount of time.

commit 9f5d74ba51e450ba0fe0c643dee2a36e1ad0bf24
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Mar 19 22:17:53 2015 -0400

    checkpoint code for event-driven CPU exception handling instead of polling
    
    insert 4 instructions into the go function call prologue to check for
    interrupts and call the interrupt handler if necessary. be careful not to
    clobber the context or TLS registers.
    
    i just realized this approach has a big problem though: what if there are no
    runnable go routines? thus we really need to start/wakeup a goroutine if there
    aren't any runnable goroutines.
    
    starting a goroutine from interrupt context is difficult though (i tried it
    earlier today) since we need to manipulate run queues in interrupt context --
    obviously interrupt code cannot attempt to acquire the mutex protecting the run
    queues.
    
    need to figure something out.

commit 5ccc61ae8b99f8f7cd34ec1d9a9a091977b20680
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Mar 20 09:29:34 2015 -0400

    don't count sysmon in checkdead() in biscuit

commit ab6e4e6208b9f9df9760b11556f294d6f6a083a3
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Mar 20 14:37:07 2015 -0400

    wakeup a goroutine for CPU interrupts/no polling
    
    biscuit starts a special trap consuming goroutine, as before, but now instead
    of the Gosched/Usleep nonsense, it calls Trapsched which puts the goroutine to
    sleep if there are no more interrupts to process. when an interrupt comes in,
    the handler sets a flag which is checked by all Ps when looking for goroutines
    to run. they race for ownership of the trap consuming goroutine and the winner
    puts it on his run queue.
    
    another notable change: when an M can't find a goroutine to run, it yields
    instead of stopping itself.
    
    the difference is immediately noticable -- the test hardware with 1 or 8 CPUs
    is much more responsive. unfortunately, it doesn't improve our numbers in the
    bmwrite benchmark! interesting.
    
    the sleep/wakeup code is a little complicated; i hope to simplify it.
    
    comment out my addition to the compiler that generates the check in the
    function prologue since we don't need it. it may be useful later.

commit f926f3e8f2fb8c72090cb47780bb78ac16e2267d
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 23 11:15:24 2015 -0400

    Gcticks()

commit 665a3668c3f54f0b1332c881500445e7f18e60fd
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 23 14:09:20 2015 -0400

    bug

commit d5600b6e4f75d73444053ba79074aed81105d9bf
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Apr 8 11:29:39 2015 -0400

    print carriage return before newline for serial console
    
    so it doesn't look terrible on my serial terminal emulator

commit 52ad8578842c29124587128da43fda3ba0fc3345
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Apr 8 14:43:15 2015 -0400

    when runtime can't find runnable go routines, yield instead of usleep
    
    the runtime kernel thread should remain runnable instead of waiting for CPU 0
    to wake it up (even though its timeout was 0).

commit 17877e16cd96886aef649d7a838c0300814cc96a
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Apr 16 12:38:36 2015 -0400

    cleanup

commit f48b075a57db04c9d9877cfe050debb49f2fc918
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Apr 28 14:58:07 2015 -0400

    x

commit 76a288d752cd38fecdb0f2a739d337695e75001f
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri May 1 00:39:38 2015 -0400

    sys_kill
    
    need to cooperate with the runtime since go code is completely unaware of timer
    interrupts but a timer interrupt may be the only way that a user program stops
    executing.

commit 79fe6a2aab12e92cc2a5e658bdd7880f795e37bd
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon May 4 14:42:35 2015 -0400

    cleanup exec
    
    fix clunky interface instead of working around it

commit 17fd1cf934bc4439b674fc34a0befe79994441e2
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon May 4 22:06:24 2015 -0400

    ulimit for memory, fix open
    
    open with O_CREAT should fail if the file already exists only if O_EXCL is also
    given.

commit 288caddf00b685f06959f099efd106c0ffe698bc
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri May 8 08:32:16 2015 -0400

    remove usepid

commit 0c9544f66afccab98449e99e9ed95f247407ed9d
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri May 8 09:44:44 2015 -0400

    start threads
    
    let a process have more than one schedule entry and cleanup notification
    mechanism since terminating a process is more annoying now. also try coding
    style that makes frequent use of types to help differentiate identifiers.

commit 864f37688f95337cd9d7424cd493cabe56af1329
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed May 13 19:50:43 2015 -0400

    input support for serial console driver
    
    now i can easily run biscuit remotely via qemu -- i no longer need X11
    forwarding/qemu's vga screen! this will be useful while i'm in utah...

commit 9a439e3de0aa2bf3202e7eb8e19a63356ece1e0b
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Jun 30 13:56:14 2015 -0400

    figure out LAPIC clock speed using 8254 PIT
    
    we need a sense of time because i want timeouts to be specified in seconds,
    milliseconds, etc. instead of cycles. since the 8254 has a well known frequency
    we can use it to determine the LAPIC's frequency (which is different from the
    CPU's frequency), which we can then use to keep track of nanoseconds per timer
    interrupt.
    
    qemu's lapic clock is 1Ghz while the test hardware's is 132Mhz.
    
    time package is still broken -- this is the first step to fixing it.

commit 069222d403218b151bde2cf8faf1570d69a91997
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Jun 30 23:06:20 2015 -0400

    separate code for timer interrupts and yielding
    
    since i now use the timer interrupt to keep track of wall clock time, we need
    to differentiate yields from clock ticks since only clock ticks should
    increment the uptime counter. the runtime yields a lot due to futexs.
    
    it is important that the yield interrupt use an IST since it is called from go
    routines.
    
    however, i do not yet initialize the uptime ticks -- i start at 0. thus the
    runtime thinks it is dec 31st, 1969. i don't care about this yet.

commit b504aec22e58e552552b9591601c1e167ba10b5a
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Jul 2 21:04:22 2015 -0400

    silly hack for time.Now()
    
    the runtime will try to open /etc/localtime if you try to print the result or
    use any of its helper methods. specifically fail open("/etc/localtime"), but
    make sure any other opens panic.

commit 4188417ffa117ea3ca927335a72d8f5bf536c69f
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Jul 7 13:07:13 2015 -0400

    TLB shootdowns with test
    
    i learned that gcc will not warn if it fails to align data as requested.

commit 9584fc26485cd6ea356c227b6e0ac8094b5441a6
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Jul 7 14:37:52 2015 -0400

    fix time machine bug
    
    runtime·osyield() used the old method of yielding and thus made the nanoseconds
    counter increase way faster than it should.
    
    now multithreaded mailbench works on the test hardware.

commit 171be25929b179d9a592258439e28acfbff58afc
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Jul 8 13:53:17 2015 -0400

    amusing gettimeofday bug and thread-safe nanotime()

commit a85533bc0325362bfb829451ba897fa959062d40
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Jul 14 10:38:36 2015 -0400

    use TSC for timekeeping instead of LAPIC clock
    
    LAPIC clock is annoying because the current time is unknown inbetween when a
    time interrupt is generated but before the time quantum is added to the clock
    (since the current count register has been reset!).  also, LAPIC timers are not
    synchronized between CPUs (obviously).
    
    TSC is much easier since it increases constantly on recent hardware. Intel
    guarantees that TSC increases at a constant rate from Pentium 4s and on.

commit 27e911a554f2db3369928a45b5cf0fe2dd8bcd7b
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Jul 13 12:49:11 2015 -0400

    make go profiler work!
    
    required simulating signals and setitimer (and thus an accurate way to count
    virtual time).
    
    also, make TLB shootdowns always save/restore context to reduce complexity.

commit 9612442aee13bb041bcc55d488eed68c91315d36
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Jul 14 15:32:18 2015 -0400

    fake syscall to enable profiling
    
    make time(1) call it.
    
    its convenient to extract the profile from biscuit to a computer with go tools
    to vizualize the profile data. the method of extracting the profile is very
    sophisticated: biscuit dumps the profile to the serial console in a format
    suitable for "xxd -r" so we can copy and paste it.

commit 91445b6c767c175c2b6c7e82812d1c1e32e94b30
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Jul 14 17:12:44 2015 -0400

    x

commit 730508cfee08830434e0717b95acd64e28dc1106
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Jul 15 17:00:16 2015 -0400

    fix race in fpuinit

commit e3f5a85c9d0922bd16caa3877be57a2287d49698
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Jul 16 11:16:02 2015 -0400

    cleanup - move SSE state into thread_t, ensure alignment

commit 0a194c889f673cfbc0af7672f98c17ee0f2e987a
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Jul 17 17:45:05 2015 -0400

    use two yield functions
    
    so i can distinguish between callers easier during profiling.

commit 25519899364645e69efad0eab93a08e6719be5cc
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Jul 17 17:54:52 2015 -0400

    accounting for system/sleep time; no user time yet

commit f5b812e2c082dc66ca8d544c552b514d62b84c4c
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sat Jul 18 16:47:05 2015 -0400

    user time accounting

commit 17aa36ef02950b6ec41fa50645e327808b0df09b
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Jul 29 15:03:49 2015 -0400

    count kernel CPU time

commit f416948f1718246ed6846a952dc473a2f3b5eb9a
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Jul 29 17:49:40 2015 -0400

    use wall-clock time to profile kernel instead of virtual time
    
    the profile now claims that mutex sleeps are the bottleneck. i need to verify
    that this is true.

commit 77565733c5709b24302f40c0f869ce142369f096
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Aug 4 18:51:23 2015 -0400

    reminder for when we stop switching pmaps on interrupt

commit eb23fbed3c9d1209b1ed42f6cabd047a724d395f
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Aug 5 10:56:18 2015 -0400

    sys_fake2() for benchmarking syscall overhead

commit 52c552b50dffc526134411d943f39098d3527105
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Aug 5 12:15:02 2015 -0400

    pad GDT with another null segment
    
    sysret requires that the index to the kernel code/data segment descriptors is 4
    slots below the user code/data segments.

commit 2f77267ebb7f01d46d2ca6850fdf684f9139fe4b
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Aug 6 10:27:37 2015 -0400

    sysenter/sysexit
    
    not using it for syscalls yet

commit 557416733ff81970f56e3e6a66e97de156981291
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Aug 6 14:41:34 2015 -0400

    use %gs in kernel mode to keep per-cpu state

commit d85e8930054a70fe8b14ec13ed472befac44001c
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Aug 6 16:43:10 2015 -0400

    don't use int instruction to yield
    
    build trap frame in software

commit 12f6359215edd94c1614eb0faf0a172e27d0b301
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Aug 10 13:16:16 2015 -0400

    use runtime memmove/memclr instead of homerolled ones
    
    the builtin ones are optimized to used SSE and increase performance of a hacked
    version of mailbench by 57%.
    
    i made my own when i first started biscuit because i wasn't sure what the
    built-in ones depended on and we need these very early in the boot process.
    
    thus, we must call fpuinit() earlier in boot process.

commit ed0b07c85032473e34506733c6d46d343c6022f4
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Aug 10 13:34:59 2015 -0400

    only profile runnable kernel threads

commit 7dcd8750349a6d8b99cee23fc11757029d90c680
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Aug 10 13:38:05 2015 -0400

    sanity check for new gs code

commit 0779a7a243ba99b46cddb1307434ea2d13cd2eb2
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Aug 10 17:36:02 2015 -0400

    use sysenter for syscalls
    
    mostly for fun. other things in biscuit are slow enough that this makes little
    difference for performance as of now.

commit c1792a43a8b5c1e822567bef7978f96c7decc6f9
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Aug 11 01:08:33 2015 -0400

    more bm

commit ab916a9e934cf1e8182435334525812abb5f0816
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Aug 13 13:48:22 2015 -0400

    even more bm

commit 9689d12f1f07e156e9c0a971745b31edf48241b8
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Aug 19 10:56:21 2015 -0400

    uninterruptible while taking runtime mmap lock

commit 650d4a458940a08f46bf61b93e9da731be600fc5
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Aug 19 16:33:28 2015 -0400

    GC once heap size grows 8x instead of 2x

commit 0ee2cfce58f7d0f401d3701786e15486cf08b0af
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Sep 23 14:30:33 2015 -0400

    prepare for new interrupt/syscall handling
    
    we will not switch page maps when taking an interrupt/syscall, thus add
    paranoia checks to ensure that the runtime never adds new entries to the
    kernel's PML4.
    
    thus, since user processes share kernel page tables, all mem allocated by the
    runtime will always be mapped in all processes.

commit 3ad9816a4631fe8ffdb70106969aeaff89718350
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Sep 25 11:37:17 2015 -0400

    Userrun() for fast syscalls and better interface to user programs
    
    system call overhead is reduced 10x using this approach, putting Biscuit on par
    with Linux. i think the main reasons for this speedup are that, during
    syscalls, there is little state saved when switching to/from kernel mode and we
    now use a single go routine to handle all of a thread's CPU exceptions/syscalls
    instead of creating a new one for each event.
    
    Userrun() also makes the code for handling all user events (page faults, timer
    interrupts) clearer and exposes timer interrupts during user program execution
    to the kernel, allowing for finer grained control and time accounting.
    
    i still need to fix thread termination: since user programs are no longer
    managed via global state, it should be easier but i haven't done it yet.
    
    also, start converting C code to Go code. its painful because we have to have
    two defintions of every struct that is used by both kinds of code -- it is up
    to the programmer to make sure they are coherent. maybe this will help motivate
    me to convert more C to Go.
    
    cleanup trap() and trap circular buffer code since only IRQs/IPIs go through
    the circular buffer now. sadly, we can't handle IRQs using the new method
    because IRQs/IPIs are truly asynchronous, thus we need a way to inject them
    into the runtime regardless of whether the CPU is currently in user or kernel
    mode.

commit 3600ba2c89a0d7fdf3a700b4617e3c1842c829a8
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Sep 30 13:33:47 2015 -0400

    whoops: kill rogue code

commit 7b14bae3b1ede63d14cd972c27b40a2816838078
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Oct 1 11:47:43 2015 -0400

    delete code that is now unused, fix process termination
    
    the C scheduler no longer cares about pids or notifying. still need to fix
    threads, pmap freeing, and kernel profiling.

commit 28f7b69fd71acdbabe5b664f6930a52997a1bae2
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Oct 1 20:05:44 2015 -0400

    page map free'ing daemon
    
    in order to do system calls really fast, we cannot switch page maps on
    user->kernel or kernel->user transitions (on the test hardware, always
    switching page maps is 2x slower on a getpid benchmark!).
    
    but now it is tricky to know when it is safe to free a page map since any CPU
    in kernel mode may have the page map in question loaded at any time.
    
    thus, have a daemon that collects page maps once all threads of a user process
    have terminated. then, once a second, broadcast an IPI that causes all kernel
    threads to load the kernel page map, ensuring that no CPU can have the user
    page map loaded. finally, free all collected page maps. repeat.

commit e8a09a0d95cb53bdeb4c34d6a51167eb46d57e9c
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Oct 1 20:28:32 2015 -0400

    Revert "page map free'ing daemon"
    
    This reverts commit 28f7b69fd71acdbabe5b664f6930a52997a1bae2.

commit 3a3cef58aba170adf42e824bf2029d88331c0c8e
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Oct 1 20:53:58 2015 -0400

    better idea: use this fancy thing called a "garbage collector"
    
    before returning to a user program, set shadow pointers to the program's pmap.
    all interrupts currently load the kernel pmap, thus it is safe to clear the
    current CPU's shadow pointers in the interrupt handler after loading the kernel
    pmap.

commit 7079490f36e84e7f5e53fe5457b4b36ee837c473
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Oct 2 10:22:55 2015 -0400

    cleanup pmap shadow pointers -- convert more C code to Go code
    
    move the definition the array of per-cpu structs from C to Go so it is all
    GC'ed.

commit 2b3cdc7f2138ec8d05d333e45f49c68267ce213f
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Oct 2 13:22:40 2015 -0400

    fix threads and SMP; save/restore less user state
    
    only getrusage(2) is broken now

commit 936e9d809b4456cbd2ab2c2b4eed3f7ec30e3ae3
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Oct 2 18:03:35 2015 -0400

    fix FS segment bug; cleanup segment code
    
    also fix an amusing, ancient bug from when i apparently didn't yet know that
    the calling convention for both runtime C and Go code is to pass return values
    on the stack. my assembly code expected the return value in rax. magically,
    this code never broke because the compiler is apparently very likely to use rax
    to hold the return value in order to copy it to the caller's stack frame.

commit fda13ed50a16c256f2e062de1d927f407d8dbbce
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Oct 7 20:57:46 2015 -0400

    x

commit 5389dc74bbde98a76781deac845f56cc5b2aa0ff
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Oct 26 17:13:12 2015 -0400

    bugfix: make sure gs is set for APs too, not just BSP

commit 24af809c65c819399fbb23b963b159c1b3e2083a
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Oct 27 12:00:16 2015 -0400

    Cprint(), a useful debugging function

commit e387f1e3cdbe53aab07e8fc150153ec62d729ac3
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Oct 27 12:01:19 2015 -0400

    bugfix: prevent deadlock with TLB shootdown+GC
    
    the old TLB shootdown code would wait for all shootdowns to complete by cas'ing
    the variable holding the number of outstanding shootdowns with 0. it was
    possible that, before the CPU waiting for all shootdowns to complete could
    observe the 0 count, another CPU would install a new TLB count.
    
    i thought this was fine since the waiting CPU must observe 0 at some point.
    turns out it may not if the CPU that installs the new count is preempted by a
    GC before it actually sends the IPIs. then the GC loops forever, trying to
    preempt the waiting CPU (which is not preemptable as it is looping for the
    count to reach 0).
    
    this new code ensures that the waiting CPU figures out that its shootdown is
    complete, even if some other CPU installs a new count before the waiting CPU
    observes a 0 count.

commit 02f50069cf03d71c037b95cc3d03db13482374ce
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Oct 27 12:15:39 2015 -0400

    whoops: make sure APs null FS too

commit 054253568d1dbde6e9c379ab3f228ec2baade3c7
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Oct 30 11:58:22 2015 -0400

    get com0 interrupts working on hardware too
    
    now i can finally do performance experiments on my test hardware remotely!

commit a900f8371a90ee27205fe4daf0f5b7f4ae6dd854
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Oct 30 13:32:59 2015 -0400

    x

commit 1a1aaa718bca2205e3407cc40802dfc1519fb82c
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Nov 3 14:01:51 2015 -0500

    document uart config

commit dadfaf660e7674d8c42d5ceb9c5fb62feb56e2aa
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Feb 3 12:55:20 2016 -0500

    use a baud rate that is not from antiquity
    
    this saves me probably 30 seconds of waiting for a performance profile to dump.

commit 2edfb7be16739788f20a5846eeaf04a158cfd193
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Feb 9 09:24:16 2016 -0500

    bugfix: runtime.usleep() takes us, not ns!
    
    and use the right type

commit 936269fb17bc7a205b7b177d751ab6a5c441b844
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Feb 9 11:53:48 2016 -0500

    start fixing some types

commit cd37c7a96d6fd5d1628af4ccaa8fb9382227d7f3
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Feb 9 12:46:52 2016 -0500

    unstupidefy and convert TSS64 code C code to Go
    
    in preparation for NMI interrupts

commit 709aad3a882250082360b61c38475e2b646228d9
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Feb 9 14:37:24 2016 -0500

    allocate/map AP's NMI stack

commit 96fa737ec3f75661d98cb3a2b00eb8cf6f4cdeed
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Feb 10 09:33:43 2016 -0500

    performance profiling skeleton via NMI and performance counters
    
    and an IPI to enable/disable the counters on all available cores.
    
    should have done this a long time ago; preliminary profiles look promising!

commit bb5a1721fff47c5a8e5614c72e91775653da9530
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Feb 10 11:46:20 2016 -0500

    more robust kernel fault printer
    
    so that faults taken in weird scenarios, like when the print lock has been
    taken, are more likely to print to console.

commit 58b3eb92190abc687f8f6338a61f7187408f7155
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Feb 10 15:17:06 2016 -0500

    barebones RIP sampling

commit 571984098ed696fe6d8e34627ba6b6bae164b3c7
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Feb 11 14:33:11 2016 -0500

    profiling cleanup

commit 52f1a8f45c66b3d4feb75984ba8b1a9db45ef565
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Feb 12 16:43:51 2016 -0500

    poor man's NMI backtracing via Intel branch profiling
    
    if only my cpu was one generation newer, the backtrace would be way more useful

commit 5622df310bc9755d2e9c920fd5dac464505b9b38
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Feb 12 16:48:09 2016 -0500

    make stack dumps readable on serial console

commit 117a717ce6b4d4ca2138eceaddaa4f797f4ee640
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Feb 16 14:35:20 2016 -0500

    note to prevent baffled cody later

commit 818a1d8121dcaaf94c7f199bac4af3c1ab9c6be4
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Feb 19 15:59:10 2016 -0500

    move gettimeofday(2) to userspace, similar to linux's vDSO
    
    gives redis +30%. linux is only 2x faster now!

commit e4b26400804dcdde503520bea560c8bd467d63bc
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Feb 23 14:33:30 2016 -0500

    whoops; don't forget to shift mask

commit 1537e1f51cab44f77d8fd4b94d012bed432a31db
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Feb 24 19:39:27 2016 -0500

    avoid unnecessary TLB flush

commit fbc0a61061615ef4ff8df6fa3aec24efb77aca32
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Feb 25 09:55:01 2016 -0500

    don't count performance events during NMI handler

commit 3c5f27f4d00edcb9515b7029905f46e079486ce0
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Feb 26 17:16:00 2016 -0500

    fix more types

commit 20c620212cbff204c09ce38c3ddc60213e144ec2
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Feb 29 11:05:00 2016 -0500

    generalize/cleanup NMI profiling

commit ffb4f0660ba1f3eb6ad0922f5cb7da2ad8c82036
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Mar 2 12:15:05 2016 -0500

    un-derpify some of the first go code

commit 9d7ed5792bf3272212cba9e35f24dda8ec796639
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Mar 4 13:45:30 2016 -0500

    new bmgc

commit 3b52f875747da9139455aff1a73b0f19e6ed712f
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Mar 4 16:45:19 2016 -0500

    start the probably long and terrible road to merging with 1.5
    
    will then merge with 1.6 if all goes well. 1.4 -> 1.5 will probably be more
    work than 1.5 -> 1.6 since i need to convert all my C code to go code.
    fortunately, conversion to go code has a few benefits.

commit 802c0853b6181d05707a9617d894d4c20364403b
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Mar 4 16:50:07 2016 -0500

    note

commit 9bcf96fb6b3400d4994aab3079f01c0fb0162add
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 7 08:22:19 2016 -0500

    convert and cleanup segmentation code

commit a462abcffb2d074d365b07930e844e62b852af99
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 7 12:27:01 2016 -0500

    convert and cleanup interrupt init code

commit c25f8fd81340dac2232dda30103b50c15ee9a1b2
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 7 16:58:16 2016 -0500

    convert/cleanup pmap, FPU, and physical memory code

commit 52206a8a4e651d7bf860ffe777e620e49e857753
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 7 22:29:40 2016 -0500

    convert runtime's fake mmap
    
    all this physical memory management code will probably go away soon

commit fabac2066375972d19f23a2997a9718b9f813e4d
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Mar 8 13:05:37 2016 -0500

    convert and fix fake munmap and tlb shootdown code

commit 01398330b0a342dca59abcd1fcbd4f9172c52c5d
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Mar 8 15:19:32 2016 -0500

    convert fake clone

commit c8bf8e0cb06d3ba231ba90071303ab38d27087fd
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Mar 8 16:37:44 2016 -0500

    start converting scheduler code

commit fe3471e33f3fe3e430246c9855c46036355c5e4f
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Mar 9 11:14:30 2016 -0500

    finish fake syscalls: exit, sigaltstack, nanotime, futex, setitimer, write

commit 624faa7efb6223d3632e7f3a65efbedab9698a2d
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Mar 9 14:37:55 2016 -0500

    convert LAPIC init code

commit 7ce9f81275ddcb9582b1289a8d57134daa7866f7
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Mar 9 17:09:15 2016 -0500

    finish init code: BSP/AP, syscall, and GS init

commit 19c7622688382187565f3028ca8b70f697663b07
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Mar 10 11:32:26 2016 -0500

    convert trap()

commit 3b2847880ad9ea408a9c1c3405a6dfb8dc3974b0
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Mar 10 23:18:13 2016 -0500

    complete bulk of the conversion
    
    SIGPROF simulation for profiling and various others. now only a dozen or so
    lines of C code remain. the C code has no knowledge of threads or cpus.  great!

commit 458bebe13f7cf51f41d66388d18ddeac670212f5
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Mar 11 11:23:57 2016 -0500

    finish and cleanup of main C file
    
    just trap{sched,wake} C code remains.

commit 9dc22ee5cffa389a199e69a2756c6c6e4fbc4db5
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Mar 11 15:32:55 2016 -0500

    final cleanup
    
    i cannot convert the trap sleep/wake code to go since the 1.4 scheduler is in
    C.
    
    now for the merge!

commit e2f500e61c3c4075737c89bcab37cdf66cc167df
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sat Mar 12 15:41:30 2016 -0500

    avoid pmap freeing race
    
    a cpu's currently loaded pmap could be GC'ed after it sets the shadow pointers
    to a new pmap but before it loads the new pmap in cr3.

commit d2eb6433fbeb4c4e81dbda541959e71e03c244c6
Merge: e2f500e61c 7bc40ffb05
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Mar 13 11:21:11 2016 -0400

    Merge tag 'go1.6' into tmerge
    
    Conflicts:
            .gitignore
            src/cmd/dist/build.c
            src/cmd/ld/lib.c
            src/liblink/obj6.c
            src/runtime/mgc0.c
            src/runtime/os_linux.c
            src/runtime/os_linux.go
            src/runtime/proc.c
            src/runtime/runtime.c
            src/runtime/stack.h
            src/runtime/sys_linux_amd64.s
            src/runtime/traceback.go

commit b193f491121140c325fed031f424c3330a043829
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sat Mar 12 12:20:38 2016 -0500

    1.5 updates
    
    one notable change: go1.5 no longer uses amd64 ELF TLS address of -16(%fs), but
    -8(%fs).

commit 57a9973bd03f6d002292cad5848253f3e1a90ebb
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sat Mar 12 22:38:42 2016 -0500

    remove invariant-breaking write barriers
    
    concurrent collectors require write barriers. we need to be careful with them
    in uninterruptible code though. almost all of biscuit's runtime pointer writes
    do not reference heap allocated objects, so write barriers can be elided.
    
    go 1.5 works! that was much less painful than i thought it would be.
    
    still need to convert trap wake/sleep. then i will investigate our fancy new
    gc.

commit 28f5e5bec78489d6944748d1fae28b3aa5a54c2c
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sat Mar 12 12:15:04 2016 -0500

    temporarily disable trap sleep/wake
    
    for easier testing. need to write trap sleep/wake for 1.5.

commit 0d4fb800de4704a94b0306fb7e6bb051c06e70b6
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Mar 13 10:08:16 2016 -0400

    convert trap sched/wake code
    
    Conflicts:
            src/runtime/proc1.go

commit 93ec45cbb498d55871ebaf82ac1a7147f892e3f4
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Mar 13 12:24:28 2016 -0400

    correct hackmode type

commit 6aab455cac150466c54183621f099381a7ead533
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 14 09:15:29 2016 -0400

    go1.6 updates
    
    only small changes: they renamed atomic functions, also use sigaltstack(2) to
    query current signal stack instead of only specifying a new one, and made m0's
    struct statically allocated.
    
    go1.6 now works too!

commit 68eebb2650da54f7f6e582705e72f58bd8537011
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 14 15:51:22 2016 -0400

    include concurrent GC marking in the idle loop

commit 9e2d502d74cec4bdfb9184688f47c19546c1873d
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 14 18:31:04 2016 -0400

    whoops; make biscuit under go1.4 compile again

commit ed705e5d5685b44117883ef35a316f2715970817
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Mar 17 11:06:10 2016 -0400

    fix pthread_self(3)
    
    i forgot to make it return the thread id instead of pid after adding pthread
    support, nearly a year ago.

commit 2127140d40c07fbfb7b306413974738a6513d301
Merge: 5e688d3bc1 1378634a88
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Mar 17 14:41:27 2016 -0400

    Merge branch 'master' into g1.6

commit 31f65868b0a0613d43a5ed7c343a9c84fca6af22
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Mar 17 18:35:25 2016 -0400

    add a cool banner and go runtime version
    
    to avoid confusion

commit 7bfde1c2a79c854799b7f9c3ec68c29c4996bbff
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Mar 18 15:50:23 2016 -0400

    fix Cpuprint

commit a4597a0d0c30278be6922739d50c07eaaccf76d4
Merge: 59edf3b5ab 7bfde1c2a7
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Mar 18 15:51:04 2016 -0400

    Merge branch 'master' into g1.6

commit 95976b6c289e752b1e38f69928598291404c522e
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Mar 22 13:30:22 2016 -0400

    update sys_info(2) for go1.6 GC stats

commit 25fbb28fd9756a46f0493be877f7fe664ef92007
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Mar 25 12:02:56 2016 -0400

    allocate pmap and user pages manually via reference counting

commit 74b9cf7ec29e97b74361f0548bffa4e454925023
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 28 09:35:49 2016 -0400

    x

commit e666b5217681eeb9544b7c558f51abf5b767933b
Merge: ac4fd1e2ef 74b9cf7ec2
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 28 09:36:10 2016 -0400

    Merge branch 'master' into g1.6

commit 5d73957d24a2eb170242fa2b0ef4ca915e1cd1d7
Merge: e666b52176 25fbb28fd9
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 28 13:52:03 2016 -0400

    Merge branch 'refpgs' into g1.6refpgs

commit 44287673b2d2fbfdbcbf2d9bb0fb47120bcbbc60
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Mar 30 17:44:40 2016 -0400

    after taking NMI due to PMU, re-enable all counters
    
    not just the one that overflowed

commit b3c876b13ae0a95fbed94f6e7825699798d07016
Merge: 1e639341ec bbe8bd23a4
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Mar 30 17:49:23 2016 -0400

    Merge branch 'master' into g1.6

commit c12b1e36fcc40adeccd77dfbc7c0c76e87dedb4d
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Apr 1 15:07:46 2016 -0400

    use largest E820 segment
    
    gives me 17GB of physical memory instead of 1.3GB on my test hardware

commit 470361b6983f0afc73a089857c9b1fedef3a8d2e
Merge: e06f912f02 23d0c6b74a
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Apr 1 15:24:46 2016 -0400

    Merge branch 'master' into g1.6
    
    Conflicts:
            biscuit/syscall.go
            biscuit/user/c/time.c

commit 270ff99522fe4bdc5f45fc48fa2bb6809a79893e
Merge: 5d73957d24 5c449bd30b
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Apr 1 16:22:27 2016 -0400

    Merge branch 'g1.6' into g1.6refpgs
    
    Conflicts:
            biscuit/main.go
            src/runtime/os_linux.go

commit 6b499932b4c6c7a02ff51806181c00fe56b7da00
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sat Apr 9 15:32:29 2016 -0400

    1.6 fixes

commit e1d7c27f14f93f157ada689f93dcae06a7e24aa0
Merge: 05a1ae9d23 6b499932b4
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sat Apr 9 15:33:17 2016 -0400

    Merge branch 'g1.6' into g1.6refpgs

commit 70b551cdfa3e12285dfc4404b24e87250271bec9
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Apr 17 13:31:16 2016 -0400

    avoid wrmsr in syscall return fast path

commit c21321b93ca32f94a581d5bc2c17a4c29bf502bf
Merge: f5e1820aea 70b551cdfa
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Apr 17 13:33:25 2016 -0400

    Merge branch 'master' into g1.6

commit a37151c9efc0f565091159d06721234dec16255b
Merge: b044932c21 c21321b93c
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Apr 17 13:34:29 2016 -0400

    Merge branch 'g1.6' into g1.6refpgs

commit afaed0d78e3be4007eb52632ceed3576295ec47a
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Apr 18 14:06:25 2016 -0400

    don't yield Ps before returning to userspace
    
    has considerable overhead and seems like a waste of time since the user process
    can, at worst, keep the P "busy" for one scheduling quantum.

commit 9891544c69fd06881d11afcee6826af09093c1ff
Merge: c21321b93c 8c004279e4
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Apr 18 14:20:32 2016 -0400

    Merge branch 'master' into g1.6
    
    Conflicts:
            src/runtime/os_linux.go

commit c34f2c381382bffe2a34f8359608be1ae494bd3c
Merge: a37151c9ef 9891544c69
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Apr 18 14:22:24 2016 -0400

    Merge branch 'g1.6' into g1.6refpgs

commit e6305e34251d6b647ecf90efa038fa2cdec27756
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Apr 19 19:40:27 2016 -0400

    use per-cpu GS to track sysenter stack
    
    that way we avoid using IA32_SYSENTER_ESP which requires wrmsr.
    
    significantly reduces syscall overhead.

commit d3b976c14798556f5973821b59899b39dcb0a1a8
Merge: 9891544c69 e6305e3425
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Apr 19 19:46:47 2016 -0400

    Merge branch 'master' into g1.6
    
    Conflicts:
            src/runtime/asm_amd64.s
            src/runtime/os_linux.go

commit 21005eb3c27132902387f94dcf234d5706657abb
Merge: c34f2c3813 d3b976c147
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Apr 19 19:50:03 2016 -0400

    Merge branch 'g1.6' into g1.6refpgs

commit 4354980481920ac314e3e3260cd4cce0665df681
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Apr 22 23:17:02 2016 -0400

    reduce system call overhead
    
    avoid all {rd,wr}msrs during syscalls. there are several necesary steps to
    achieve this:
    
    1) rewrite the kernel binary to use %gs instead of %fs (which is defined as the
    TLS indirect pointer in the amd64 ELF TLS ABI), that way we don't need to
    context switch %fs on every syscall. i tried modifying the go runtime/compiler
    to simply use %gs, but the runtime still panic'ed and the build system requires
    running go binaries natively on the host platform. thus i was unable to build
    my modified runtime fully. instead, i wrote a small script to rewrite my kernel
    binary to use %gs while the runtime build system is left unchanged.
    
    2) since the kernel now uses %gs for TLS, store the per-CPU indirect pointer in
    IA32_KERNEL_GS_BASE MSR. now we simply use swapgs to load the per-CPU indirect
    pointer.
    
    3) expand trap frame to save/restore %gs since it is per thread now. context
    switches never save/restore %fs now; %fs is explicitly loaded in Userrun(). in
    order to avoid a rdmsr to detect whether %fs is correct, we shadow the %fs
    register in a per-CPU variable. thus checking %fs is a memory load instead of
    rdmsr.

commit da19be2a966e52d34427588c1bff9ffbb72f3773
Merge: 21005eb3c2 4354980481
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Apr 22 23:47:31 2016 -0400

    Merge branch 'g1.6' into g1.6refpgs

commit 3b0208af22172fcb286ddb312106b665c90b6068
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Apr 24 09:19:40 2016 -0400

    don't need pmap shadow pointers for refpgs

commit 002ce084b0bacf92d0ab5dc8043191969042d7d3
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Apr 27 22:15:47 2016 -0400

    gc cpu time counting and alloc benchmark hacks

commit 7ffd55248c85c4ecce8925c2c2a07fca6f02e60f
Merge: 28e260d131 002ce084b0
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Apr 27 22:16:25 2016 -0400

    Merge branch 'g1.6' into g1.6refpgs

commit 33b12633b799ca33f27f7e01ec58a0ecb3d63f01
Merge: 7c0621b9b6 57e459e02b
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu May 5 16:59:22 2016 -0400

    Merge tag 'go1.6.2' into g1.6

commit 6ffa38130725167a905ec9e94078ac1b3d31e79d
Merge: c0e756b7be 33b12633b7
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu May 5 16:59:41 2016 -0400

    Merge branch 'g1.6' into g1.6refpgs

commit cc468922f655cdad22990fbbaf5fa685491ff5c0
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu May 5 23:42:11 2016 -0400

    expose dTLB event in time(3) PMU profiling

commit 1de551172dc82bdedba140de8143ac12c2b5f1aa
Merge: 6ffa381307 cc468922f6
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu May 5 23:43:36 2016 -0400

    Merge branch 'g1.6' into g1.6refpgs

commit a96d19335f1c7d45fd6bf8a1ab4a76fce1175f97
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon May 9 20:43:39 2016 -0400

    use LBR to precisely detect branch mispredicts

commit c50ee39286fa603a3cfae882d09116ae931fc796
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon May 9 20:44:16 2016 -0400

    wrap long serial console lines

commit e9ca64775997f65cbff166988fdfdcb38df3d51e
Merge: 1de551172d c50ee39286
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon May 9 20:45:30 2016 -0400

    Merge branch 'g1.6' into g1.6refpgs

commit eebdc9f18d967944e8f9a7841020f5e71c8c6852
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Jun 10 23:40:41 2016 -0400

    fix pmap freeing
    
    increase page map reference count when they are loaded/unloaded on each CPU
    too, that way we can safely free them.
    
    it's a real shame that allocating the page maps via the GC is prohibitively
    expensive for fork-intensive benchmarks; it was really convenient.

commit 0f2f9cba43482fe3cb1f115da80d22a81cba0006
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Jun 10 23:54:55 2016 -0400

    TLB shootdown bugfix
    
    thread_t.pmap is always the kernel pmap and has been for a while now.

commit b9b33f8332a67ffd39872809f66394318bafd17c
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sat Jun 11 18:43:36 2016 -0400

    remove some old crap

commit 2dceafbbce01f88e98e5e6d3f397cf4bc2c2df18
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Aug 5 19:58:25 2016 -0400

    bugfix: correct file offset when middle of mapped file is unmapped
    
    and cleanup

commit 0dd6398408ce9631b6ebf53beead93b3f98d3754
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Aug 30 14:01:36 2016 -0400

    put all IO APIC interrupt vectors in IDT

commit c4eaea40aa0fe5a50728a0a8a260efd68e1a96dc
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Sep 6 10:50:49 2016 -0400

    export spinlocks from runtime

commit 1762b976a717768353ca0fa1741ea40e6008fca8
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Sep 6 10:51:33 2016 -0400

    use IOAPIC instead of 8259s
    
    no real functional change. mostly documentation about x86 interrupts.

commit d8a4be6ab399396c8a6ea9ec9fc8d634b9d6b115
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Sep 6 14:45:25 2016 -0400

    support PCI memory bars, cleanup

commit 6bd4bbe83eebe7f0f0609c13b2525ab9dcc2ded0
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sat Sep 10 18:32:58 2016 -0400

    new IRQ subsystem
    
    new system is simpler and doesn't create a new goroutine for each IRQ. instead
    a driver creates an IRQ-handling goroutine which calls runtime.IRQsched(irqn)
    where irqn is the IRQ number that, when received, will wake the goroutine.

commit 682404b7fb59f9cbe186b27bb4b284594d58d80b
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Sep 13 12:14:32 2016 -0400

    Store32() to guarantee 32bit writes without lock prefix
    
    all of the storing functions in go's atomic package use xchg, but asserting
    lock while storing to memory mapped registers seems like a bad idea.

commit 211db1ef73659ddec408e9aac0c56db8e82238c7
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Sep 19 11:28:02 2016 -0400

    checkpoint baby ixgbe driver
    
    general initialization and MSI testing. MSI is amazing compared to PCI
    interrupts!

commit 181dd4903156bc1df3e2a061f41c1ba60f7f4c2c
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Sep 30 11:14:27 2016 -0400

    tie up loose end
    
    make sure performance counter interrupt handler doesn't clobber SSE regs

commit 15ab8373f959604fb52502ba7062c8b7ef953694
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Sep 30 12:34:11 2016 -0400

    non-overlapping MSI and IRQ ranges; interrupt cleanup

commit be6e29ededdc2ffb612489bf6c29e75ca57bea02
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sat Oct 1 15:48:05 2016 -0400

    start ixgbe interrupt handler
    
    configure interrupt throttling too

commit 695238907d4702b9924369238f11c14bdafd3002
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Oct 5 10:07:18 2016 -0400

    x

commit a9355f9237a373dc4d5e7737bfdb82738389ab88
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Oct 7 09:23:43 2016 -0400

    allow use of entire E820 page, not just first 15 entries
    
    the code used to put the E820 entries into the MBR, thus the limit. i moved
    them to their own page a long time ago but forgot to increase the limit.
    
    this is necessary for the new biscuit hardware.

commit decc3a0919dbd60c4e2214a9245576be250c50d7
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Oct 10 16:35:22 2016 -0400

    remove confusing asm
    
    this instruction is a no op because the immediate is sign-extended to 64-bit,
    resulting in: "andq $-1, %rax". remove it -- it is unnecessary since wrmsr
    writes edx:eax to the MSR.

commit bad70500c93c3993e1edbf0e19695f95ca21484a
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Oct 26 16:36:09 2016 -0400

    basic TCP sending

commit 6338f565c8aee15dae802b39e6337144cf3006fe
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Dec 1 10:40:09 2016 -0500

    fix TLB flushing
    
    broke it in the summer when i added better pmap freeing

commit 5de8ea145ac0d850a0921f9d37944267ef340a27
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Dec 14 08:47:32 2016 -0500

    x

commit e89ca7e2b00ad3df864652b000d3932667b0bda1
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Dec 15 15:54:05 2016 -0500

    revert to ancestor of golang/master and go1.6.2

commit 106db54e283f176737d642420b2ff3ce71d84e32
Merge: e89ca7e2b0 7a62274065
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Dec 15 15:56:06 2016 -0500

    Merge commit '7a622740655bb5fcbd160eb96887032314842e6e' into newmaster
    
    Conflicts:
            src/runtime/os1_linux.go
            src/runtime/os_linux.go
            src/runtime/runtime2.go

commit 0ac702e900e2199f6b40d3d7228a29c08d4e730c
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Dec 16 11:03:53 2016 -0500

    initialize SSE earlier in boot

commit eaf3fec38b4f39b9e7ee9b48eb7164ee8634c983
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Dec 16 11:05:24 2016 -0500

    manually set ncpu, no-op getRandomData

commit 6d8c62768cab561c48376f9d45aa0b2d0acda4d4
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Dec 16 11:05:55 2016 -0500

    fix Userrun()
    
    the fast syscall code is brittle and must know the size of the stack frame. the
    go1.7 compiler apparently changed the size of the stack frame.
    
    the fast syscall code needs an overhaul -- bandaid this for now; i'll fix and
    redo this code later.

commit f1e22ef8310565aab9ae6d542ebade541d997f6d
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Dec 16 11:21:56 2016 -0500

    move yield int number from IRQ range to software int range

commit ec960a90d798404cb0a389a7bc60e6f9b5ad2da5
Merge: f1e22ef831 41908a5453
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Dec 16 15:33:11 2016 -0500

    Merge commit '41908a54530120b68a79e0fd22b5e709d33cced0' into newmaster
    
    Conflicts:
            src/runtime/os_linux.go
            src/runtime/sys_linux_amd64.s

commit fa2c4ef4a2941edebd0fc05fff6c1b2071029878
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Dec 16 15:57:05 2016 -0500

    updates for runtime upgrade

commit a4117b2e2a0bc3e092e1c3258ec7d9eb4d11cf68
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Fri Dec 16 16:25:01 2016 -0500

    disable a couple unnecessary write barriers
    
    use the go compiler's nice new feature which asserts that a function neither
    contains nor ever calls a function containing write barriers.
    
    these pointer writes may be executed at any time (interrupt context) and the
    pointers they are modify are either to objects not allocated by the GC or must
    always be reachable (either through runtime.allgs or on the caller's stack). we
    need to disable them, otherwise they may be executed when certain invariants
    don't hold (namely when m.p == nil).

commit 79a8617b45871bcc73577f511d3340ac306e7e45
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Jan 16 13:52:51 2017 -0500

    reduce "OS" quantum from 10ms to 1ms
    
    now runtime can more accurately preempt mutators from doing too much GC work.

commit 51a1efba44e4d91a0b89e931c2a24e34c6dca592
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Jan 24 10:45:02 2017 -0500

    correctly report available physical memory

commit ba6205f0411566e31e695ab202f7d83c0799881a
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Jan 31 16:59:18 2017 -0500

    use built-in funcPC to get function address

commit 4b1377d122d8f49e36dd4927bb01b88671bb10c8
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Feb 1 19:23:12 2017 -0500

    busy wait for runnable Ms
    
    the old code would occasionally execute the hlt instruction during brief
    periods when there are no runnable threads (like during runtime lock
    contention). the result is that the runtime thread is not awoken until the next
    timer interrupt which doesn't occur until 500 us later, on average.
    
    instead, busy wait for runnable threads with interrupts enabled.

commit d6c5713ebb9f22d3e36b45fb112cc60fa2e9b973
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Feb 2 17:01:31 2017 -0500

    poll sleeping Ms, too
    
    although i just modified the scheduler to poll for runnable threads, the old
    code wouldn't also check for sleeping threads that should be woken. thus these
    threads would not be awoken until the next timer interrupt (which is, on
    average, 500us away). a runtime thread sometimes sleeps for 100us when
    synchronizing with other runtime threads.
    
    this fixes our nginx and mailbench multicore performance. nginx with 1, 2, and
    4 cores have throughput within 5% of linux!

commit 57e98f91c075807f05307284a86db4aa20413f3e
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Feb 7 09:35:27 2017 -0500

    allow write barriers, cleanup more ancient silly types
    
    these write-barriers are now OK since runtime uses %gs instead of %fs

commit 6844eb36923c95ddab3ba731b1018fba6114e492
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Feb 8 13:25:43 2017 -0500

    cleanup/speedup system calls

commit c7551fcab5f34b451342236b1d72fc28b135bf3e
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Feb 13 17:55:10 2017 -0500

    pad cpu_t to be a multiple of cacheline size
    
    otherwise cache thrashing due to false sharing of tf/fxbuf reads with sysrsp
    writes tanks performance by up 18%.
    
    calling getpid in a loop with 4 CPUs is now perfectly scalable!

commit 2c213bd4cdfdf4da90cc880b9594e2e55820368d
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Feb 23 17:10:07 2017 -0500

    remove threadinfo lock from syscall path

commit 3595a774046f172f07537a9310605b8c45bbbfc6
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Feb 27 11:04:31 2017 -0500

    restore user SSE regs after servicing interrupts
    
    biscuit has always carefully saved user SSE regs, but until now didn't restore
    them after taking an interrupt. this was never detected until now since my user
    programs rarely use SSE instructions.
    
    i discovered the bug because lmbench calculates benchmark results with SSE
    double precision division and, for one particular benchmark, the compiler put
    fprintf on a new page. thus the benchmark tried to print the benchmark results
    via fprintf which caused a fault, lazily loaded fprintf's instructions, and
    finally clobbered the SSE regs holding the benchmark results. the benchmark
    then proceeded to print that biscuit has 128TB/s of read-file bandwidth.

commit 74c6983edbae5e9663c5718a74ca52db5ea5c03d
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Mar 2 10:41:09 2017 -0500

    disable runtime.netpolinited

commit 50924887463e6a687619e7d7344d16bcb1bcccd7
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Thu Mar 2 17:56:18 2017 -0500

    make idle GC worker poll for interrupts, too

commit 34e00fe2d2b46cdb6b01652da71ab96d5b4eea01
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Mon Mar 20 09:29:51 2017 -0400

    ixgbe per-CPU TX queues
    
    in the old code, the lock on the single queue was the single most contended
    lock during the nginx experiment. per-CPU TX queues increase nginx throughput
    by 13%.

commit 55500ccb98ff52e9ed78871fb6e869afe7ad4a70
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Wed Mar 22 13:44:13 2017 -0400

    simplify TLB shootdown code

commit 4902bc93035162b878a40d9ed204e197db231659
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Sun Apr 2 17:56:57 2017 -0400

    use 2MB pages to map kernel text
    
    greatly reduces iTLB misses, giving us the remaining 10% mailbench throughput!
    hooray!

commit cbbcd20cfdc70e7b1221f4588cbfc6a908492812
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Tue Feb 13 10:27:17 2018 -0500

    fix TLB flush regression
    
    biscuit on 1 CPU may fail to flush the TLB under certain thread schedules. our
    TLB flush test case in usertests caught this bug!
    
    the TLB flushing/pmap freeing code desperately needs a cleanup -- i shall do so
    soonish...

commit 916e7575c70670a7285cfb41bc0ebfd50076721f
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sun Feb 11 07:29:17 2018 -0500

    memory reservation mechanism
    
    a goroutine reserves n bytes by subtracting n from the global reservation
    counter. if the global reservation counter is less than n, the reservation
    fails. when the goroutine allocates, it subtracts the number of bytes allocated
    from its reservation.
    
    when the system call/interrupt is over, the goroutine returns the remaining
    bytes by adding them to the global reservation counter.
    
    after the GC sweeps all pages, the number of newly swept bytes are added back
    to the global reservation counter.

commit 60ff68d09b47a2dd9dc436703716957b898a1157
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Mon Feb 12 18:51:38 2018 -0500

    incremental memory reservations

commit 2c2419c204ba753f2225de283fed4c8e97271c37
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Fri Feb 23 10:36:52 2018 -0500

    debugging code to find allocations without reservations

commit deeb3584bbc64f589e0c53e56dde583005ee1217
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Tue Mar 6 15:20:01 2018 -0500

    kernel thread reservation functions

commit 8e8bc32eb1d35de4f633085097e60b113e7079b5
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Tue Mar 6 20:25:57 2018 -0500

    linux-like "current" to access owning Proc_t from its kernel thread
    
    this is useful to check a process's killed flag for when deciding whether to
    block for more memory or stop a possibly endless sleep/block (to kill).

commit fc259e8451583012348203cbf034ba124d05571c
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Thu Mar 8 11:00:26 2018 -0500

    typos, some restarting
    
    naively restarting read/write is safe on files, but not on pipes. luckily the
    pipe code is simple and no locks are held when it makes a reservation, so
    sleeping is fine.

commit f3f5f03213171a628ad5b49da012105471034775
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Thu Mar 8 19:39:20 2018 -0500

    handle cached allocations
    
    for ifree() and bitmap_t.apply()

commit cf916a427f13aa56419293cc7500d86afdb12b56
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Fri Mar 9 12:02:39 2018 -0500

    explicitly try to evict cache allocations
    
    in the two important places: ifree() and bitmap_t.apply

commit fd082153c52093c5abd8494bfa3b2d7b64a62536
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Fri Mar 9 13:30:34 2018 -0500

    syscall restarter/reservation failure tester and hacks for user FS
    
    it instantly found bugs. hacks to prevent user-mode FS from bothering with
    (failed) reservations.

commit 61e55ea75dca6907266f1f41c433d2ce49492346
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sun Mar 11 13:20:52 2018 -0400

    bugfix: deadlock in interrupt waking code with concurrent GC
    
    release spinlock and re-enable interrupts before calling functions that may
    split the stack, preempting the thread into a GC.

commit de642bbc41dd50e6a1be4b92f154111b7e9064b3
Merge: 0f6136c03c 61e55ea75d
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sun Mar 11 15:25:50 2018 -0400

    Merge branch 'package' into package-res

commit 9ebfe137348ca6a2767a7198cf27aef05c87af32
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sun Mar 11 17:42:42 2018 -0400

    reliable kill
    
    seems to work. its a bit of a shame that this design adds some synchronization
    overhead to every exit(2).

commit da6c5eec72494efb147710361331271da4a4e5ff
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Thu Mar 15 10:07:39 2018 -0400

    res size dumper

commit df63bb9130f9e4617cd7a53ad774dd1e70df1207
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Fri Mar 16 11:26:22 2018 -0400

    reservation leaking
    
    useful for testing

commit a26cc76d8f76189ad4abc9fd8deee83c28d525f6
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Fri Mar 16 11:28:00 2018 -0400

    runtime.GCX(), to avoid excessive GCs during low memory situations

commit ea849969c7a51f495d9a576ca87550ca0589e263
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Fri Mar 16 15:45:19 2018 -0400

    OOM killer
    
    successfully kills the naughty program and leaves the good citizen program be.

commit d1a7bab6d0f11d4d3b725b133a8dbf9561a28024
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Mon Mar 19 09:12:00 2018 -0400

    better and simpler live data accounting

commit b3b4659ac8294a01ca1b6a330530e0716483e80b
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Mon Mar 19 09:13:25 2018 -0400

    simpler gctrace info

commit 82a3d81b9af3ffe7a4b1416dbebf52186fba5ebd
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Mon Mar 19 09:16:10 2018 -0400

    SQUASH ACCOUNTING

commit 7d7aee8e74b7f71bf2d26882e8ad5bf78f9bac86
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sun Mar 25 13:03:01 2018 -0400

    reservation counter bugfix

commit 690b83a1ace12d6985b0d3e9235e011acb87b0fc
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Tue Apr 3 14:22:09 2018 -0400

    more to the pile of fast syscall hacks
    
    add syscall fast path. i'm tired of optimizing syscall overhead!
    
    biscuit's syscall design incurs additional overhead. it is convenient to treat
    a return to userspace as a function call (i.e. Userrun()) from the kernel. the
    result is that the corresponding return instruction is executed after switching
    to and back from usermode, which is quite slow (70us/getppid vs 50us/gettpid).
    
    i suspect my CPU flushes the return buffer after switching privilege modes. it
    isn't TLB flushes since the TLB was not flushed (getppid benchmark) and
    everything should have been in the cache...

commit c136e8f393a84cdcf9b904bf09f22aa2e5ee915b
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Wed Apr 11 11:01:50 2018 -0400

    hack compiler to allow bypassing package boundaries
    
    for debugging, it is nice to directly access symbols in other packages. this
    allows us to use the go:linkname directive to do so.
    
    packaged biscuit's days are numbered!

commit 837dc9472cec2a87da90186241e21a498c7d407b
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Fri Apr 13 16:28:53 2018 -0400

    x

commit d26e091e4ea5a80357dfb105ca3e785f51c19713
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Fri Apr 13 16:21:23 2018 -0400

    mark kernel text/bss/heap pages "global"
    
    reduces TLB misses for context-switch heavy benchmarks, like ping-pong

commit 5c034daf10983f18fe9e629f9daa0c20b09fa1c4
Merge: 8d0a669400 9d4215311b
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sat Apr 14 07:50:10 2018 -0400

    Merge commit '9d4215311ba573a5b676de85b053eec03e577478' into rememrge

commit ce12e9bef3db23e95443d9a6df4458f26e974be0
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sat Apr 14 11:43:12 2018 -0400

    go1.10.1 build fixes
    
    the new build system apparently depends on netpollinitted() correctly
    working; use a less lame hack

commit 83e61395e0b5df6a6ae366071782fe512fbe57be
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sat Apr 14 11:45:17 2018 -0400

    disable my unused GC time counters

commit f5a071578940cdc8c89faabb6b20747ed6a8619d
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sat Apr 14 11:46:24 2018 -0400

    merge startup path with go1.10.1

commit f64130c1048a9af00cfa5472310df0374c25b8e6
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sun Apr 15 10:59:53 2018 -0400

    fix runtime startup, some cleanup

commit 112690bce58a6b9a2c8b677c20babfbdd8302901
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sun Apr 15 13:41:44 2018 -0400

    fix Userrun() stack size
    
    compiler changed stack size. someday i will fix it so stack size changes won't
    matter.

commit 032ae82bda72553ff583c69b7dc1da3d81479aa0
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sun Apr 15 13:47:08 2018 -0400

    avoid write barrier in Ap_setup()
    
    be more careful and ensure no write barriers are present in the "shim" layer.
    
    everything seems to work.

commit 8294fc745ad21d8cbe695e5c30f646616fa018d5
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sun Apr 15 14:05:41 2018 -0400

    resurrect compiler hack

commit 06c8387457653b06a2c270fb43470217bbc077b2
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Wed Apr 18 21:58:07 2018 -0400

    record backtrace during PMC interrupt for kernel code
    
    a bit tricky since an NMI can occur when interrupts are masked, like between
    biscuit's swapgs pairs. luckily we can use go's backtrace code without much
    difficulty.
    
    hopefully this will be helpful in optimizing our benchmarks.

commit 89fffeb593db4be2013e1ac58e08203d07783e2a
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Wed Apr 18 23:20:52 2018 -0400

    x

commit 22e4386647bb4e378aada14bad6f914f342efc39
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Thu Apr 19 10:33:13 2018 -0400

    backtrace flag to time(1)

commit a0974516713f7f073f70c250926e652fef7dffcb
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Thu Apr 19 13:48:16 2018 -0400

    backtrace, graphviz support to munch.py
    
    sadly the graphviz crap was a complete waste of time!

commit d5ca5f676b0ec7f112e33d2d648c60a7e727e212
Merge: 8294fc745a b8826d12a6
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Fri Apr 20 22:15:47 2018 -0400

    Merge commit 'b8826d12a691bdd63c8d7522e9bc26a1df0d717a' into remerge

commit e6d7de0057ab1b00f3526f4bb89db100c9f6139a
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Fri Apr 20 22:19:59 2018 -0400

    update go backtrace code for go1.10.1

commit 4180f2418605841d12bc9d912bb669a1a941c3d7
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Fri Apr 20 10:02:25 2018 -0400

    increase default goroutine stack size to 8k
    
    cmailbench constantly creates new goroutines via fork which promptly grow their
    stacks before exiting, using ~11% CPU cycles. linux uses 16k stacks so
    increasing stack size is probably fair, at least.
    
    we may be able to reduce stack usage instead, perhaps by reducing function
    arguments, return values, or locals.

commit 788336d926020df5a56b62f8821ca35bffc2b110
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Fri Apr 20 23:12:45 2018 -0400

    go less crazy with defer
    
    remove a few of the easily replaced defers. i left the defers in rename, open,
    unlink, and exec since replacing those is painful.
    
    before this patch, cmailbench spent ~9% of CPU cycles in defer related stuff.

commit 04ea2dcb99aac2a356870adb029893d16951f87a
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sat Apr 21 12:47:45 2018 -0400

    res cleanup

commit 8e67edac1ffedd29d63c4790a26196d7989cbf09
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sat Apr 21 12:54:16 2018 -0400

    debugging stuff

commit 1a8df1e91a3c402557d345669d0ef1df41c249ab
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sun Apr 15 13:47:08 2018 -0400

    avoid write barrier in Ap_setup()
    
    be more careful and ensure no write barriers are present in the "shim" layer.
    
    everything seems to work.
    
    (cherry picked from go1.10.1 merge branch)

commit 21d15638fc7e8baab73083a326368d96c3520ea3
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Mon Apr 23 16:37:43 2018 -0400

    PMI memory corruption bug
    
    if an PMI occurs after the "OS" scheduler stops executing a thread and unlocks
    the threadlock but before the CPU starts executing a new thread, the old thread
    may be picked up by another CPU and have its TLS change unexpectedly due to the
    setg() call

commit 01ec84acb8e3a21e95d7f256b2aa8b5c3aa1f5e3
Merge: e6d7de0057 5e7ee04735
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Mon Apr 30 17:27:42 2018 -0400

    Merge branch 'master' (early part) into remerge

commit 7cb9b125c79763f489e37c23d060911e11e96548
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Wed May 2 11:15:29 2018 -0400

    hacked per-cpu profiles

commit 70b528fd8419412249cb70f47c211570fb511ee7
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Thu May 3 14:24:23 2018 -0400

    save magic lines to reduce allocator unit from 64MB to 4MB

commit b1403637c17c974c7d08d48643de965f1bae8082
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Wed May 16 12:17:28 2018 -0400

    percentile dump

commit 50ee3a12710b78ee4357aa5c1c5ce162d343b6f0
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Wed May 16 12:20:06 2018 -0400

    simpler gc printer

commit 86bd5624fa48bbb4fb1890f2a651105285cf3843
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Wed May 16 12:27:40 2018 -0400

    x

commit 449f846c111657c25defe1efc355d58490aa351f
Merge: 86bd5624fa 70b528fd84
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Wed May 16 14:05:23 2018 -0400

    Merge branch 'remerge'
    
    merge go1.10.1! goodbye go1.8

commit 5487da153bfc0da5fd974e6b000305d558b870a1
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Tue May 22 10:14:40 2018 -0400

    per-CPU backtrace support, too
    
    begin post-submission cleanup tasks!

commit 4f0ba91ab7d995f58f1514659f2c188b6f4fa6f5
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Thu Jun 7 11:24:33 2018 -0400

    x

commit 8a1b0cd262fcb207c9e00099b12eb5339cf95b01
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Thu Jun 7 11:34:49 2018 -0400

    Revert "x"
    
    This reverts commit 4f0ba91ab7d995f58f1514659f2c188b6f4fa6f5.
    
    did not mean to commit all that debugging crap...

commit 5ad5266af47bd33f445372e92e5aa108b8b11bfa
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Mon Jun 25 12:56:33 2018 -0400

    explicitly set mutator assist factor, cleanup

commit 68660f834baed6b60aa48a53d0d4e7b148355197
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Wed Jun 27 17:13:20 2018 -0400

    dump caller rips

commit 2081f1a3e270062fa2418a26dab4f37039c151ea
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Wed Jul 11 12:31:04 2018 -0400

    runtime.[LSM]fence()

commit e02ae2be85c3ce8d75623784c6b08ff9e7145fd0
Merge: fc7f26c04f 38d7c136c9
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Fri Jul 20 16:06:32 2018 -0400

    Merge remote-tracking branch 'origin/refactor' into refactmerge

commit 47177dd141e35424206567a5450b6610684f2967
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Mon Jul 23 13:37:54 2018 -0400

    x

commit 2925fec25aee2eee1954c3863c6e1deb8a19fce2
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Tue Jul 24 11:04:30 2018 -0400

    simplify how the GC replenishes reservation credit

commit f643b76cc4e774f028f9042a555b9f824f646d0b
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Tue Jul 24 17:02:36 2018 -0400

    checkpoint size-class reservations

commit 5fc29bd3e1d27383e9d4b20f2693030f80e9d1e0
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sat Jul 28 18:22:09 2018 -0400

    SSE optimized, distributed size-class reservations
    
    (still uses live bytes since MAXLIVE doesn't support size-classes)
    
    throughput is still good: parrun performance is 16.1k msgs/sec and nginx is
    higher than the submission. using SIMD for adding/subtracting/comparing
    size-classes improves throughput by ~6% compared to iteration.

commit ce3cd47a44aa2293d683ff0d87fa6f21df2e2272
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Mon Jul 30 09:10:24 2018 -0400

    x

commit 4b8cf886583ad0909536cc14b6891cd4cbe10a80
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Mon Aug 6 17:39:35 2018 -0400

    x

commit 2694a7da4122aa1c26545c30a25a673dc935ca8b
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Wed Aug 22 15:46:11 2018 -0400

    update GCX() for go1.10.1
    
    synchronize with GC to prevent the OOM killer from forcing two back-to-back
    GCs.

commit eda6a4d1ec6c8495558a86fb8457ecd093bdc3ac
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Wed Aug 22 15:47:38 2018 -0400

    enable reservations after boot
    
    log recovery can allocate a lot, exhausting the 1MB boot reservation. init(1)
    will set the correct heap limit.

commit 1dc8454c823a570c52bc57e8613cb41437c1d68d
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Mon Feb 4 21:07:21 2019 -0500

    stores to MMIO registers must not be locked
    
    hurray, bhw2 finally works! goodbye four days of my life

commit 485de00b5adb1ad0247a1684c4bf0f9b6f62b57e
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Tue Feb 12 17:25:33 2019 -0500

    fix LAPIC version check

commit 7d320f31de71051a996978dd6ced377e327d03d1
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Wed Feb 13 15:26:13 2019 -0500

    disable syscall fast path
    
    it improves performance only a little and has been broken for a while.

commit 878d28f8c995cc129073be59a68c9f9d6df03f7f
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Thu Feb 14 17:35:37 2019 -0500

    fix race between AP bootup and first TLB shootdown
    
    if a CPU sends a TLB shootdown IPI before an AP has enabled its LAPIC, the IPI
    will apparently be lost. the sender will loop forever, waiting for a TLB
    shootdown acknowledgment that will never occur.
    
    the race was unlikely to occur with low core counts, but with bhw2's 20 CPUs,
    it occurred every boot.
    
    fix this race by making the BSP wait until all APs have configured their
    LAPICs.

commit 565ddaf86cea6461649f22a362409682c9ea1d58
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sat Feb 23 10:44:08 2019 -0500

    fine-grained control of CPU use
    
    bhw2 has 2 sockets with 10 cores and hyperthreads. add support to
    enable/disable specific CPUs at various levels.

commit 175c5ab63fc4fe6e11b821541566f5c496f422e1
Author: Cody Cutler <ccutler@csail.mit.edu>
Date:   Sat Feb 23 10:48:38 2019 -0500

    raise MAXCPUS to 64
