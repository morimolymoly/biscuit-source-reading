commit 131be52ff6244505406fcdb3a7197886d84f7227
Author: Cody Cutler <ccutler@mat.lcs.mit.edu>
Date:   Tue Mar 17 12:36:36 2015 -0400

    keyboard driver

    now i can run multiple benchmarks without reimaging/rebooting!

diff --git a/biscuit/GNUmakefile b/biscuit/GNUmakefile
index db66de69a0..481a8df02c 100644
--- a/biscuit/GNUmakefile
+++ b/biscuit/GNUmakefile
@@ -15,7 +15,7 @@ KSRC := main.go syscall.go pmap.go fs.go hw.go
 OBJS := $(patsubst %.S,%.o,$(patsubst %.c,%.o,$(SRCS)))

 UBINS := hello fault fork getpid fstest fswrite fsmkdir fscreat fsbigwrite \
-	  fslink fsunlink fsfree ls bmwrite bmread
+	  fslink fsunlink fsfree ls bmwrite bmread conio
 FSUPROGS := $(patsubst %,fsdir/bin/%,$(UBINS))
 UPROGS := $(patsubst %,user/%,$(UBINS))

diff --git a/biscuit/main.go b/biscuit/main.go
index d5ec34f2e2..d6679d85ce 100644
--- a/biscuit/main.go
+++ b/biscuit/main.go
@@ -64,7 +64,10 @@ const(

 	// low 3 bits must be zero
 	IRQ_BASE  = 32
+	IRQ_KBD   = 1
 	IRQ_LAST  = IRQ_BASE + 16
+
+	INT_KBD   = IRQ_BASE + IRQ_KBD
 )

 // initialized by disk attach functions
@@ -131,6 +134,8 @@ func trapstub(tf *[TFSIZE]int, pid int) {
 		// automatic eoi also doesn't work on the slave.
 		//p8259_eoi()
 		runtime.Proccontinue()
+	case INT_KBD:
+		runtime.Proccontinue()
 	default:
 		runtime.Pnum(trapno)
 		runtime.Pnum(tf[TF_RIP])
@@ -181,6 +186,10 @@ func trap_disk(ts *trapstore_t) {
 	ide_int_done <- true
 }

+func trap_kbd(ts *trapstore_t) {
+	cons.kbd_int <- true
+}
+
 //var klock	= sync.Mutex{}

 func trap_syscall(ts *trapstore_t) {
@@ -416,7 +425,7 @@ func proc_kill(pid int) {
 	//runtime.ReadMemStats(&ms)
 	//before := ms.Alloc

-	runtime.GC()
+	//runtime.GC()
 	//runtime.ReadMemStats(&ms)
 	//after := ms.Alloc
 	//fmt.Printf("reclaimed %vK\n", (before-after)/1024)
@@ -809,6 +818,94 @@ func qemuconfig() {
 	fmt.Printf("I am Qemu\n")
 }

+func kbd_init() {
+	km := make(map[int]byte)
+	NO := byte(0)
+	tm := []byte{
+	    // ty xv6
+	    NO,   0x1B, '1',  '2',  '3',  '4',  '5',  '6',  // 0x00
+	    '7',  '8',  '9',  '0',  '-',  '=',  '\b', '\t',
+	    'q',  'w',  'e',  'r',  't',  'y',  'u',  'i',  // 0x10
+	    'o',  'p',  '[',  ']',  '\n', NO,   'a',  's',
+	    'd',  'f',  'g',  'h',  'j',  'k',  'l',  ';',  // 0x20
+	    '\'', '`',  NO,   '\\', 'z',  'x',  'c',  'v',
+	    'b',  'n',  'm',  ',',  '.',  '/',  NO,   '*',  // 0x30
+	    NO,   ' ',  NO,   NO,   NO,   NO,   NO,   NO,
+	    NO,   NO,   NO,   NO,   NO,   NO,   NO,   '7',  // 0x40
+	    '8',  '9',  '-',  '4',  '5',  '6',  '+',  '1',
+	    '2',  '3',  '0',  '.',  NO,   NO,   NO,   NO,   // 0x50
+	    }
+
+	for i, c := range tm {
+		km[i] = c
+	}
+	cons.kbd_int = make(chan bool)
+	cons.reader = make(chan []byte)
+	cons.reqc = make(chan int)
+	go kbd_daemon(&cons, km)
+	irq_unmask(IRQ_KBD)
+	// make sure kbd int is clear
+	runtime.Inb(0x60)
+}
+
+type cons_t struct {
+	kbd_int chan bool
+	reader	chan []byte
+	reqc	chan int
+}
+
+var cons	= cons_t{}
+
+func kbd_daemon(cons *cons_t, km map[int]byte) {
+	inb := runtime.Inb
+	kready := func() bool {
+		ibf := 1 << 0
+		st := inb(0x64)
+		if st & ibf == 0 {
+			//panic("no kbd data?")
+			return false
+		}
+		return true
+	}
+	var reqc chan int
+	data := make([]byte, 0)
+	for {
+		select {
+		case <- cons.kbd_int:
+			if !kready() {
+				continue
+			}
+			sc := inb(0x60)
+			c, ok := km[sc]
+			if ok {
+				data = append(data, c)
+			}
+		case l := <- reqc:
+			if l > len(data) {
+				l = len(data)
+			}
+			data = data[0:l]
+			cons.reader <- data
+			data = make([]byte, 0)
+		}
+		if len(data) == 0 {
+			reqc = nil
+		} else {
+			reqc = cons.reqc
+		}
+	}
+}
+
+// reads keyboard data, blocking for at least 1 byte. returns at most cnt
+// bytes.
+func kbd_get(cnt int) []byte {
+	if cnt < 0 {
+		panic("negative cnt")
+	}
+	cons.reqc <- cnt
+	return <- cons.reader
+}
+
 func attach_devs() {
 	pcibus_attach()
 }
@@ -832,6 +929,7 @@ func main() {
 		panic("no disk")
 	}

+	// must come before init funcs below
 	runtime.Install_traphandler(trapstub)

 	trap_diex := func(c int) func(*trapstore_t) {
@@ -846,12 +944,16 @@ func main() {
 	     PGFAULT: trap_pgfault,
 	     SYSCALL: trap_syscall,
 	     INT_DISK: trap_disk,
+	     INT_KBD: trap_kbd,
 	     }
 	go trap(handlers)

-	cpus_start()
+	//cpus_start()

 	fs_init()
+	kbd_init()
+
+	runtime.Resetgcticks()

 	exec := func(cmd string) {
 		fmt.Printf("start [%v]\n", cmd)
@@ -874,9 +976,10 @@ func main() {
 	//exec("bin/fsmkdir")
 	//exec("bin/fscreat")
 	//exec("bin/fsfree")
-	exec("bin/ls")
+	//exec("bin/ls")
 	//exec("bin/bmwrite")
 	//exec("bin/bmread")
+	exec("bin/conio")

 	//ide_test()

diff --git a/biscuit/syscall.go b/biscuit/syscall.go
index 168ae4a327..6231a6e5bb 100644
--- a/biscuit/syscall.go
+++ b/biscuit/syscall.go
@@ -121,7 +121,7 @@ func sys_read(proc *proc_t, fdn int, bufp int, sz int) int {
 	if !ok {
 		return -EBADF
 	}
-	if fd.ftype != INODE {
+	if fd.ftype != INODE && fd.ftype != CDEV {
 		panic("no imp")
 	}
 	c := 0
@@ -139,6 +139,23 @@ func sys_read(proc *proc_t, fdn int, bufp int, sz int) int {
 		c += len(dst)
 	}

+	// stdout/stderr hack
+	if fd.ftype == CDEV {
+		kdata := kbd_get(sz)
+		ret := len(kdata)
+		for _, dst := range dsts {
+			ub := len(kdata)
+			if ub > len(dst) {
+				ub = len(dst)
+			}
+			for i := 0; i < ub; i++ {
+				dst[i] = kdata[i]
+			}
+			kdata = kdata[ub:]
+		}
+		return ret
+	}
+
 	ret, err := fs_read(dsts, fd.file.priv, fd.offset)
 	if err != 0 {
 		return err
diff --git a/biscuit/user/conio.c b/biscuit/user/conio.c
new file mode 100644
index 0000000000..0cf33f6929
--- /dev/null
+++ b/biscuit/user/conio.c
@@ -0,0 +1,11 @@
+#include <litc.h>
+
+int main(int argc, char **argv)
+{
+	while (1) {
+		char *ret = readline("input:");
+		printf("got: %s\n", ret);
+	}
+
+	return 0;
+}
diff --git a/biscuit/user/litc.c b/biscuit/user/litc.c
index 04b6ee6dc7..522e13b6e5 100644
--- a/biscuit/user/litc.c
+++ b/biscuit/user/litc.c
@@ -293,6 +293,26 @@ printf(char *fmt, ...)
 	return ret;
 }

+static char readlineb[256];
+
+char *
+readline(char *prompt)
+{
+	if (prompt)
+		printf("%s\n", prompt);
+	int ret;
+	int i = 0;
+	char c = 0x41;
+	while ((ret = read(0, &c, 1)) > 0) {
+		if (c == '\n')
+			break;
+		if (i < sizeof(readlineb) - 1)
+			readlineb[i++] = c;
+	}
+	readlineb[i] = 0;
+	return readlineb;
+}
+
 int
 snprintf(char *dst, size_t sz, const char *fmt, ...)
 {
diff --git a/biscuit/user/litc.h b/biscuit/user/litc.h
index f378d9823b..20a1f8ee4c 100644
--- a/biscuit/user/litc.h
+++ b/biscuit/user/litc.h
@@ -38,6 +38,7 @@ int printf(char *, ...);
 int vprintf(const char *, va_list);
 int printf_blue(char *, ...);
 int printf_red(char *, ...);
+char *readline(char *);
 int snprintf(char *, size_t, const char *, ...);
 char *strncpy(char *, const char *, size_t);
 size_t strlen(char *);
